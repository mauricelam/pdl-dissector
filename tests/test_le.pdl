little_endian_packets

enum PacketType: 8 {
  Simple = 0,
  Enum = 1,
  Group = 2,
  Unaligned = 3,
  Checksum = 4,
  Array = 5,
  GroupConstraint = 6,
}

// A top level packet
packet TopLevel {
  type: PacketType,
  _body_
}

// Example 1: Packet
packet SimplePacket: TopLevel(type = Simple) {
  scalar_value: 64,
}

// Test declarations are ignored by the dissector compiler
test SimplePacket {
  "\x00\x01\x02\x03\x04\x05\x06\x07\x08"
}

// Example 2: Enum
enum Enum_CoffeeAddition: 8 {
  Empty = 0,

  NonAlcoholic = 1..9 {
    Cream = 1,
    Vanilla = 2,
    Chocolate = 3,
  },

  Alcoholic = 10..19 {
    Whisky = 10,
    Rum = 11,
    Kahlua = 12,
    Aquavit = 13,
  },

  Custom = 20..29,

  Other = ..
}

packet EnumPacket: TopLevel(type = Enum) {
  addition: Enum_CoffeeAddition,
}

// Example 3: Group

group Group_Paged {
  offset: 8,
  limit: 8
}

packet Group_AskBrewHistory: TopLevel(type = Group) {
  pot: 8, // Coffee Pot
  Group_Paged
}

// Example 4 Unaligned packet
packet UnalignedPacket: TopLevel(type = Unaligned) {
  a: 3,
  b: 8,
  c: 3,
  d: 3,
  e: 3,
}

// Example 5 Checksum
checksum CRC16: 16 "crc16"

packet ChecksumPacket: TopLevel(type = Checksum) {
    _checksum_start_(crc),
    a: 16,
    b: 16,
    crc: CRC16,
}

// Example 6 Array
packet Array_Brew: TopLevel(type = Array) {
   pots: 8[2],
   additions: Enum_CoffeeAddition[2],
   extra_additions: Enum_CoffeeAddition[],
   // TODO: Add test for size modifier
}

// Example 7 Constrained Group
group GroupConstraint_Group {
    a: 16
}
struct GroupConstraint_Struct {
    GroupConstraint_Group { a = 42 },
}
packet GroupConstraint_Packet: TopLevel(type = GroupConstraint) {
    s: GroupConstraint_Struct,
}
