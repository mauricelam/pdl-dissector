little_endian_packets

enum PacketType: 8 {
  Simple = 0,
  Enum = 1,
  Group = 2,
  Unaligned = 3,
  Checksum = 4,
  Array = 5,
  GroupConstraint = 6,
  Size_Parent = 7,
  Size_Array = 8,
  InheritanceWithoutConstraint = 9,
  PayloadWithSizeModifier = 10,
  Fixed = 11,
  Padding = 12,
  Reserved = 13,
  Optional = 14,
}

// A top level packet
packet TopLevel {
  type: PacketType,
  _body_
}

// Example 0: Packet
packet SimplePacket: TopLevel(type = Simple) {
  scalar_value: 64,
}

// Test declarations are ignored by the dissector compiler
test SimplePacket {
  "\x00\x01\x02\x03\x04\x05\x06\x07\x08"
}

// Example 1: Enum
enum Enum_CoffeeAddition: 8 {
  Empty = 0,

  NonAlcoholic = 1..9 {
    Cream = 1,
    Vanilla = 2,
    Chocolate = 3,
  },

  Alcoholic = 10..19 {
    Whisky = 10,
    Rum = 11,
    Kahlua = 12,
    Aquavit = 13,
  },

  Custom = 20..29,

  Other = ..
}

packet EnumPacket: TopLevel(type = Enum) {
  addition: Enum_CoffeeAddition,
}

// Example 2: Group

group Group_Paged {
  offset: 8,
  limit: 8
}

packet Group_AskBrewHistory: TopLevel(type = Group) {
  pot: 8, // Coffee Pot
  Group_Paged
}

// Example 3: Unaligned packet
packet UnalignedPacket: TopLevel(type = Unaligned) {
  a: 3,
  b: 8,
  c: 3,
  d: 3,
  e: 3,
}

// Example 4: Checksum
checksum CRC16: 16 "crc16"

packet ChecksumPacket: TopLevel(type = Checksum) {
    _checksum_start_(crc),
    a: 16,
    b: 16,
    crc: CRC16,
}

// Example 5: Array
packet Array_Brew: TopLevel(type = Array) {
   pots: 8[2],
   additions: Enum_CoffeeAddition[2],
   extra_additions: Enum_CoffeeAddition[],
}

// Example 6: Constrained Group
group GroupConstraint_Group {
    a: 16
}
struct GroupConstraint_Struct {
    GroupConstraint_Group { a = 42 },
}
packet GroupConstraint_Packet: TopLevel(type = GroupConstraint) {
    s: GroupConstraint_Struct,
}

// Example 7: Size field (parent)

packet Size_Parent: TopLevel(type = Size_Parent) {
  _size_(_payload_): 2,
  _payload_
}

// Example 8: Size field (array)

enum Size_16bitEnum: 16 {
  A = 1,
  B = 2,
  Custom = 3..5,
  Other = ..
}

packet Size_Brew: TopLevel(type = Size_Array) {
  pot: 8,
  _size_(additions): 8,
  additions: Enum_CoffeeAddition[]
}

// Example 9: Inheritance without constraints

packet AbstractParent: TopLevel(type = InheritanceWithoutConstraint) {
  _body_
}

packet ChildWithoutConstraints: AbstractParent {
  field: 8
}

// Example 10: Payload with size modifier

packet PayloadWithSizeModifier: TopLevel(type = PayloadWithSizeModifier) {
  _size_(additions): 8,
  additions: Enum_CoffeeAddition[+2],
}

// Example 11: Fixed field (with verification)

packet Fixed_Teapot: TopLevel(type = Fixed) {
  _fixed_ = 42: 8,
  _fixed_ = Empty: Enum_CoffeeAddition
}

// Example 12: Padding

packet Padding_PaddedCoffee: TopLevel(type = Padding) {
  additions: Enum_CoffeeAddition[],
  _padding_[10]
}

// Example 13: Reserved

packet Reserved_DeloreanCoffee: TopLevel(type = Reserved) {
  _reserved_: 20
}

// Example 14: Optional

struct Optional_Cream {
  fat_percentage: 8,
}

enum Optional_Alcohol: 8 {
  WHISKY = 0,
  COGNAC = 1,
}

packet Optional_CoffeeWithAdditions: TopLevel(type = Optional) {
  want_sugar: 1,
  want_cream: 1,
  want_alcohol: 1,
  _reserved_: 5,
  sugar: 16 if want_sugar = 1,
  cream: Optional_Cream if want_cream = 1,
  alcohol: Optional_Alcohol if want_alcohol = 1,
}
